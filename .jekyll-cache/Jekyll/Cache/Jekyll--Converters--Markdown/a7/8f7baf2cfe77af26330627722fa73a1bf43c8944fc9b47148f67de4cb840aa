I"A<h1 id="what-is-pintos-project">What is pintos project?</h1>

<p>Pintos is an education-purpose Operating System.
We will perform several tasks and learn the elements of the operating system.
Pintos’ assignments are divided into four stages.</p>

<ul>
  <li>Threads</li>
  <li>User program</li>
  <li>Virtual Memory</li>
  <li>File System</li>
</ul>

<p>We first write codes about the “Threads” stage.</p>

<h1 id="threads-alarm-clock">Threads: Alarm Clock</h1>

<p>We start our re-writing code by reimplementing timer_sleep() function in /devices/timer.c.</p>

<h2 id="what-is-timer_sleep">What is timer_sleep()?</h2>

<p>timer_sleep function is as shown below,</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="cm">/* Sleeps for approximately TICKS timer ticks.  Interrupts must
   be turned on. */</span>
<span class="kt">void</span>
<span class="nf">timer_sleep</span> <span class="p">(</span><span class="kt">int64_t</span> <span class="n">ticks</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="kt">int64_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">timer_ticks</span> <span class="p">();</span>

  <span class="n">ASSERT</span> <span class="p">(</span><span class="n">intr_get_level</span> <span class="p">()</span> <span class="o">==</span> <span class="n">INTR_ON</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">timer_elapsed</span> <span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ticks</span><span class="p">)</span> 
    <span class="n">thread_yield</span> <span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This function “sleeps” thread, thread will not be running on the CPU until 
timer_elapsed(start).</p>

<p>Although a working implementation is already provided in skeleton code, it “busy waits,” 
that is, it spins in a loop checking (by using “while”) the current time
and calling thread_yield() (yields the CPU to another thread) until enough time has gone by.</p>

<p>CPU will spend its time in a loop checking code, which wastes time resources.
We need to re-implement it to avoid busy waiting.</p>

<h1 id="pintos-scheduling-algorithm">Pintos’ Scheduling Algorithm</h1>

<p>We first need to find what Scheduling Algorithm that pintos uses.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="cm">/* Chooses and returns the next thread to be scheduled.  Should
   return a thread from the run queue, unless the run queue is
   empty.  (If the running thread can continue running, then it
   will be in the run queue.)  If the run queue is empty, return
   idle_thread. */</span>
<span class="k">static</span> <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span>
<span class="nf">next_thread_to_run</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">list_empty</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ready_list</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">idle_thread</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">list_entry</span> <span class="p">(</span><span class="n">list_pop_front</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ready_list</span><span class="p">),</span> <span class="k">struct</span> <span class="kr">thread</span><span class="p">,</span> <span class="n">elem</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET